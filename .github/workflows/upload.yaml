name: connect to ncloud and upload

on:
  push:
    branches:
      - main


jobs:
  
  build-and-upload:
    runs-on: ubuntu-latest

    env:
      DB_NAME: ${{ github.DB_NAME }}          # GitHub Actions 환경 변수로 설정
      DB_PASSWORD: ${{ github.DB_PASSWORD }}
      DB_PORT: ${{ github.DB_PORT }}
      DB_URL: ${{ github.DB_URL }}
      EMAIL_PASSWORD: ${{ github.EMAIL_PASSWORD }}
      GUNICORN_NUM_WORKERS: ${{ github.GUNICORN_NUM_WORKERS }}
      INSURANCE_CLAIM_FILE: ${{ github.INSURANCE_CLAIM_FILE }}
      INSURANCE_CLAIM_PREDICTION_DIR: ${{ github.INSURANCE_CLAIM_PREDICTION_DIR }}
      MLFLOW_ARTIFACT_PATH: ${{ github.MLFLOW_ARTIFACT_PATH }}
      MLFLOW_TRACKING_URL: ${{ github.MLFLOW_TRACKING_URL }}
      MLSERVER_ENDPOINT: ${{ github.MLSERVER_ENDPOINT }}
      MLSERVER_URL: ${{ github.MLSERVER_URL }}
      MODEL_SERVER_URL: ${{ github.MODEL_SERVER_URL }}
      MONITORING_INTERVAL_HOURS: ${{ github.MONITORING_INTERVAL_HOURS }}
      NCP_CONTAINER_REGISTRY: ${{ github.NCP_CONTAINER_REGISTRY }}
      POSTGRES_DB: ${{ github.POSTGRES_DB }}
      POSTGRES_PASSWORD: ${{ github.POSTGRES_PASSWORD }}
      POSTGRES_USER: ${{ github.POSTGRES_USER }}
      RECEIVE_EMAIL_ADDRESS: ${{ github.RECEIVE_EMAIL_ADDRESS }}
      RECORD_SAVE_PATH: ${{ github.RECORD_SAVE_PATH }}
      SEND_EMAIL_ADDRESS: ${{ github.SEND_EMAIL_ADDRESS }}
      USER_NAME: ${{ github.USER_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create .env file
      run: |
        echo "DB_NAME=${DB_NAME}" >> .env
        echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
        echo "DB_PORT=${DB_PORT}" >> .env
        echo "DB_URL=${DB_URL}" >> .env
        echo "EMAIL_PASSWORD=${EMAIL_PASSWORD}" >> .env
        echo "GUNICORN_NUM_WORKERS=${GUNICORN_NUM_WORKERS}" >> .env
        echo "INSURANCE_CLAIM_FILE=${INSURANCE_CLAIM_FILE}" >> .env
        echo "INSURANCE_CLAIM_PREDICTION_DIR=${INSURANCE_CLAIM_PREDICTION_DIR}" >> .env
        echo "MLFLOW_ARTIFACT_PATH=${MLFLOW_ARTIFACT_PATH}" >> .env
        echo "MLFLOW_TRACKING_URL=${MLFLOW_TRACKING_URL}" >> .env
        echo "MLSERVER_ENDPOINT=${MLSERVER_ENDPOINT}" >> .env
        echo "MLSERVER_URL=${MLSERVER_URL}" >> .env
        echo "MODEL_SERVER_URL=${MODEL_SERVER_URL}" >> .env
        echo "MONITORING_INTERVAL_HOURS=${MONITORING_INTERVAL_HOURS}" >> .env
        echo "NCP_CONTAINER_REGISTRY=${NCP_CONTAINER_REGISTRY}" >> .env
        echo "POSTGRES_DB=${POSTGRES_DB}" >> .env
        echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
        echo "POSTGRES_USER=${POSTGRES_USER}" >> .env
        echo "RECEIVE_EMAIL_ADDRESS=${RECEIVE_EMAIL_ADDRESS}" >> .env
        echo "RECORD_SAVE_PATH=${RECORD_SAVE_PATH}" >> .env
        echo "SEND_EMAIL_ADDRESS=${SEND_EMAIL_ADDRESS}" >> .env
        echo "USER_NAME=${USER_NAME}" >> .env
        echo ".env file created successfully."


    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: |
          /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build&Save Docker images as tar files
      run: |
        sh zip-docker-compose.sh
    
    
    - name: Install Aws-CLI(ncloud는 aws-cli를 사용한다.)
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli

    - name: configure ncloud
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.NCP_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.NCP_PASSWORD }}
      run: |
        echo "Access Key ID: $AWS_ACCESS_KEY_ID"  # For debugging
        echo "Secret Access Key: $AWS_SECRET_ACCESS_KEY"  # For debugging
        aws configure set aws_access_key_id "$AWS_ACCESS_KEY_ID"
        aws configure set aws_secret_access_key "$AWS_SECRET_ACCESS_KEY"
        aws configure set default.region ap-northeast-2

    - name: upload random file

      run: |
        aws --endpoint-url=https://kr.object.fin-ncloudstorage.com \
        s3 cp docker_project.zip s3://petfins/petfins-ml-deploy-pipeline/docker_project.zip
        
      